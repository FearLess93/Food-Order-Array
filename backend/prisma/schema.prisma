// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - Employees with @array.world email
model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  ownedGroups       Group[]              @relation("GroupOwner")
  memberships       GroupMember[]
  carts             Cart[]
  messages          Message[]
  payments          Payment[]
  auditLogs         AuditLog[]
  passwordResetToken PasswordResetToken?

  @@map("users")
}

// PasswordResetToken model - For password reset functionality
model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

// Restaurant model
model Restaurant {
  id          String   @id @default(uuid())
  name        String
  description String?
  logoUrl     String?  @map("logo_url")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  menuItems MenuItem[]
  groups    Group[]

  @@map("restaurants")
}

// MenuItem model - Food items available at restaurants
model MenuItem {
  id           String   @id @default(uuid())
  restaurantId String   @map("restaurant_id")
  name         String
  description  String?
  price        Decimal  @db.Decimal(10, 2)
  tags         String[] // ['vegetarian', 'vegan', 'gluten-free', 'halal']
  imageUrl     String?  @map("image_url")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  restaurant Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]

  @@index([restaurantId])
  @@map("menu_items")
}

// Group model - Food ordering groups
model Group {
  id           String      @id @default(uuid())
  ownerId      String      @map("owner_id")
  restaurantId String      @map("restaurant_id")
  name         String
  status       GroupStatus
  joinCode     String?     @unique @map("join_code")
  startAt      DateTime    @default(now()) @map("start_at")
  endAt        DateTime    @map("end_at")
  isClosed     Boolean     @default(false) @map("is_closed")
  maxMembers   Int?        @map("max_members")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  // Relations
  owner      User          @relation("GroupOwner", fields: [ownerId], references: [id])
  restaurant Restaurant    @relation(fields: [restaurantId], references: [id])
  members    GroupMember[]
  carts      Cart[]
  messages   Message[]
  payments   Payment[]
  auditLogs  AuditLog[]

  @@index([ownerId])
  @@index([restaurantId])
  @@index([status])
  @@index([isClosed])
  @@map("groups")
}

enum GroupStatus {
  PUBLIC
  PRIVATE
}

// GroupMember model - Users who joined a group
model GroupMember {
  id       String   @id @default(uuid())
  groupId  String   @map("group_id")
  userId   String   @map("user_id")
  joinedAt DateTime @default(now()) @map("joined_at")

  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
  @@map("group_members")
}

// Cart model - User's cart within a group
model Cart {
  id        String   @id @default(uuid())
  groupId   String   @map("group_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  group Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
  @@map("carts")
}

// CartItem model - Items in a user's cart
model CartItem {
  id         String   @id @default(uuid())
  cartId     String   @map("cart_id")
  menuItemId String   @map("menu_item_id")
  quantity   Int      @default(1)
  addedAt    DateTime @default(now()) @map("added_at")

  // Relations
  cart     Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@index([cartId])
  @@index([menuItemId])
  @@map("cart_items")
}

// Message model - Chat messages in groups
model Message {
  id        String   @id @default(uuid())
  groupId   String   @map("group_id")
  userId    String   @map("user_id")
  text      String   @db.VarChar(500)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@index([groupId])
  @@index([userId])
  @@index([createdAt])
  @@map("messages")
}

// Payment model - Payment tracking for group members
model Payment {
  id               String        @id @default(uuid())
  groupId          String        @map("group_id")
  userId           String        @map("user_id")
  status           PaymentStatus @default(UNPAID)
  confirmedByOwner Boolean       @default(false) @map("confirmed_by_owner")
  confirmedAt      DateTime?     @map("confirmed_at")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
  @@map("payments")
}

enum PaymentStatus {
  UNPAID
  PENDING
  PAID
}

// AuditLog model - Audit trail for important actions
model AuditLog {
  id        String   @id @default(uuid())
  userId    String?  @map("user_id")
  groupId   String?  @map("group_id")
  action    String // 'CREATE_GROUP', 'JOIN_GROUP', 'ADD_CART_ITEM', etc.
  details   Json?
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user  User?  @relation(fields: [userId], references: [id])
  group Group? @relation(fields: [groupId], references: [id])

  @@index([userId])
  @@index([groupId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}
